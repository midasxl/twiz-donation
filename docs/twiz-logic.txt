index.php
require_once("models/config.php"); // includes and evaluates the file as it executes.  If the code has already been included, it will not be included again, and it will return TRUE.
// requires the system to keep a log what's already been included/required, adding microseconds to the overall processing time.  I'ts a non-issue  

	models/config.php:
	<?php
		require_once("db-settings.php");
	
		db-settings.php (using mysqli)
		<?php
			//Database Information variable declaration and assignment
			$db_host = "localhost"; //Host address
			$db_name = "sparky_cake"; //Name of Database
			$db_user = "sparky_admin"; //Name of database user
			$db_pass = "badhorsie5150"; //Password for database user
			$db_table_prefix = "twiz_";
			
			GLOBAL $errors; // super global variable exists in every scope (including functions)
			//$GLOBALS['errors']; // could also do it this way
			GLOBAL $successes;
			
							*********************example****************************
							<?php
							function test() {
								$foo = "local variable";

								echo '$foo in global scope: ' . $GLOBALS["foo"] . "\n";
								echo '$foo in current scope: ' . $foo . "\n";
							}

							$foo = "Example content";
							test();
							?>
							
							output:
							$foo in global scope: Example content
							$foo in current scope: local variable
							*********************end example***************************
			
			// $errors and $successes above are declared global, but the arrays created below are not
			// global declaration can come after the array declaration, thereby making the array global
			$errors = array();
			$successes = array();
			
			/* Create a new mysqli object with database connection parameters using object-oriented style */
			$mysqli = new mysqli($db_host, $db_user, $db_pass, $db_name);
			GLOBAL $mysqli; // super global variable exists in all scopes
			
			// check the connection
			if(mysqli_connect_errno()) { // returns an error code; 0 if no error
				echo "Connection Failed: " . mysqli_connect_errno();
				exit(); // terminate script
			}
			
			//Direct to install directory, if it exists.  This is for fresh installs of the UMS
			if(is_dir("install/"))
			{
				header("Location: install/");
				die();
			}
		?>
		
	models/config.php:
		//Retrieve settings via a prepared statement (sent to the database as a statement template.  The server performs syntax checks and initializes resources)
		//https://websitebeaver.com/prepared-statements-in-php-mysqli-to-prevent-sql-injection
		$stmt = $mysqli->prepare("SELECT id, name, value FROM ".$db_table_prefix."configuration");
		
		// execute the query
		$stmt->execute();
		
		// bind the result variables
		$stmt->bind_result($id, $name, $value);
		
		// fetch values as long as they exist
		while ($stmt->fetch()){
			// build an array or arrays
			$settings[$name] = array('id' => $id, 'name' => $name, 'value' => $value);
		}
		// close the prepared statement
		$stmt->close();
		
		//declare and assign variables based on the settings array
		$emailActivation 				= $settings['activation']['value'];
		$mail_templates_dir 			= "models/mail-templates/";
		$websiteName 					= $settings['website_name']['value'];
		$websiteUrl 					= $settings['website_url']['value'];
		$emailAddress 					= $settings['email']['value'];
		$resend_activation_threshold 	= $settings['resend_activation_threshold']['value'];
		$emailDate 						= date('l jS \of F Y h:i:s A');
		$language 						= $settings['language']['value'];
		$template 						= $settings['template']['value'];
		$master_account 				= -1;
		$default_hooks 					= array("#WEBSITENAME#","#WEBSITEURL#","#DATE#");
		$default_replace 				= array($websiteName,$websiteUrl,$emailDate);
		
		if (!file_exists($language)) { // checks if a file or directory exists; language is the path to the file or directory
			$language = "models/languages/en.php";
		}
		
		if(!isset($language)) // checks if a variable is NOT set (!isset)
			$language = "models/languages/en.php";
		
		//Pages to require
		require_once($language); // an array of response variables
		require_once("class.mail.php"); 
		require_once("class.user.php"); // loggedInUser class object and functions
		require_once("class.newuser.php"); // User class object (functions to add new user to database and email them (see below))
		require_once("funcs.php"); // site-wide functions
		
		?>
		
		// let's check out newuser.php
		// when a new user registers for an account an instance of the User class object is created, passing the new users provided email and password to the constructor ($user = new User($email,$password);)
		// the constructor is fed a list of arguments (like you do with a function)
		// the constructor returns $this->status = true if no errors are found.  The only error there could be is a duplicate email: $this->email_taken = true;
		// if there are no problems the registration page calls the public $user->userCakeAddUser (a function within the User class) to add the new user to the database and send an email to the user
				
		/*
		A class is a collection of variables and functions that work with those variables. Variables are defined by var and functions by function. A class is defined using the following syntax:
		Basic class definitions begin with the keyword class, followed by a class name, followed by a pair of curly braces which enclose the definitions of the properties and methods belonging to the class.
		Public: Public method or variable can be accessible from anywhere. Inside the class, outside the class and in child class also.
		Private: Method or property with private visibility can only be accessible inside the class. You can not access private method or variable from outside of your class.
		Protected: Method or variable with protected visibility can only be access in the derived class. Or in other word in child class. Protected will be used in the process of inheritance.
		*/
		class User // this is the object that is created throughout the logic, and values are assigned to the its properties
		{
			// class member variables are called "properties".  They are defined by using one of the keywords public, protected, or private followed by a normal variable declaration with or without initializing
			// property declarations only available from within this class
			private 		$clean_email;
			private 		$clean_password;
			
			// property declarations available from anywhere
			public 			$user_active = 0;
			public 			$status = false;
			public 			$sql_failure = false;
			public 			$mail_failure = false;
			public 			$email_taken = false;
			public 			$activation_token = 0;
			public 			$success = NULL;
			
			// method declarations
			/* All class objects can have a special built-in method called a ‘constructor’. 
			// Constructors allow you to initialize your object’s properties (give your properties values,) when you instantiate (create) an object (i.e. from registration page) */
			//function __construct($firstname,$lastname,$user,$display,$pass,$email)	
			function __construct($email,$pass)	
			{
				//$this represents the User class; clean_email is one of the classes properties, and it gets set to whatever is fed into the constructor (i.e. from registration page)
				//$this->clean_email = sanitize($email);
				
				//Sanitize
				$this->clean_email = sanitize($email);
				$this->clean_password = trim($pass);
				
				if(emailExists($this->clean_email))// in funcs.php 540
				{
					$this->email_taken = true;
				}
				else
				{
					//No problems have been found.
					$this->status = true;
				}
			}
			
			// method declaration
			public function userCakeAddUser()
			{
				global $mysqli,$emailActivation,$websiteUrl,$db_table_prefix;
				
				//Prevent this function being called if there were construction errors
				if($this->status)
				{
					//Construct a secure hash for the plain text password
					$secure_pass = generateHash($this->clean_password);
					
					//Construct a unique activation token
					$this->activation_token = generateActivationToken();
					
					//Do we need to send out an activation email?
					if($emailActivation == "true") // determined from the settings in the config.php file
					{
						//User must activate their account first
						$this->user_active = 0; // $this gives access to class properties and methods
						
						$mail = new userCakeMail(); // creates an instance of the userCakeMail class in class.mail.php (similar process)
						
						//Build the activation message
						$activation_message = lang("ACCOUNT_ACTIVATION_MESSAGE",array($websiteUrl,$this->activation_token));
						
						//Define more if you want to build larger structures
						$hooks = array(
							"searchStrs" => array("#ACTIVATION-MESSAGE","#ACTIVATION-KEY","#USERNAME#"),
							//"subjectStrs" => array($activation_message,$this->activation_token,$this->displayname)
							"subjectStrs" => array($activation_message,$this->activation_token)
							);
						
						/* Build the template - Optional, you can just use the sendMail function 
						Instead to pass a message. */
						
						if(!$mail->newTemplateMsg("new-registration.txt",$hooks))
						{
							$this->mail_failure = true;
						}
						else
						{
							//Send the mail. Specify users email here and subject. 
							//SendMail can have a third parameter for message if you do not wish to build a template.
							
							if(!$mail->sendMail($this->clean_email,"New User"))
							{
								$this->mail_failure = true;
							}
						}
						$this->success = lang("ACCOUNT_REGISTRATION_COMPLETE_TYPE2"); // lang function in funcs.php 194
					}
					else
					{
						//Instant account activation without the need for email verification
						$this->user_active = 1;
						$this->success = lang("ACCOUNT_REGISTRATION_COMPLETE_TYPE1");
					}	
					
					
					if(!$this->mail_failure) // if there are no errors with the email functions
					{
						//Insert the user into the database
						$stmt = $mysqli->prepare("INSERT INTO ".$db_table_prefix."users (
							password,
							email,
							activation_token,
							last_activation_request,
							lost_password_request, 
							active,
							title,
							sign_up_stamp,
							last_sign_in_stamp,
							pay_status,
							trial,
							stripe_id,
							plan_id,
							pass_change
							)
							VALUES (
							?,
							?,
							?,
							'".time()."',
							'0',
							?,
							'Base Member',
							'".time()."',
							'0',
							'0',
							'0',
							'0',
							'0',
							'0'
							)");
							
							// for future reference
							//<?php
							//$timestamp=1333699439;
							//echo gmdate("Y-m-d\TH:i:s\Z", $timestamp);
						
						// Bind parameter values and send to server.  Server creates a statement from the statement template and the bound values to execute using the initialized resources
						$stmt->bind_param("sssi", $secure_pass, $this->clean_email, $this->activation_token, $this->user_active);
						$stmt->execute();
						
						$inserted_id = $mysqli->insert_id; // returns the auto-generated id used in the latest query
						
						$stmt->close();
						
						// Insert default permission into matches table; At this point they will all be base members (permission level 2)
						// At any point we can set it to 3 so that all new users get a free three day trial!!
						// A server CRON job will change their permission_id to 2 after the three day trial
						$stmt = $mysqli->prepare("INSERT INTO ".$db_table_prefix."user_permission_matches  (
							user_id,
							permission_id
							)
							VALUES (
							?,
							'2'
							)");
						$stmt->bind_param("s", $inserted_id);
						$stmt->execute();
						$stmt->close();
						
						//Insert default credit tally into credits table
						$stmt = $mysqli->prepare("INSERT INTO ".$db_table_prefix."user_credits  (
							user_id,
							credits
							)
							VALUES (
							?,
							'0'
							)");
						$stmt->bind_param("s", $inserted_id);
						$stmt->execute();
						$stmt->close();
					}
				}
			}
}

		models/config.php: 
		session_start(); // create new or resume existing session. starting a session let's the current request use $_SESSION for persistent data
		/* When you do session_start() you are telling PHP that you want to use the session. This is made available to you as an array called $_SESSION. 
		You can use that like any other array with the difference that the stuff you put in there stays there from one page to another (provided you 
		use session_start() at the beginning of each page).  In our case, config.php, when included on the page, will have the session_start(); function
		making the session array available for that page. */
		
		if(isset($_SESSION["userCakeUser"]) && is_object($_SESSION["userCakeUser"])) // this is set at log in: $_SESSION["userCakeUser"] = $loggedInUser;
		// this session variable will be set after log in.  It is an object (an instance of the class $loggedInUser)		{
			$loggedInUser = $_SESSION["userCakeUser"]; // if it is set and it is an object, set $loggedInUser = the $_SESSION["userCakeUser"] variable which = the loaded $loggedInUser class (crazy!!)
			// I think maybe this is to make $loggedInUser an easier variable to reference on the page instead of the session array key
		}
		?>
	